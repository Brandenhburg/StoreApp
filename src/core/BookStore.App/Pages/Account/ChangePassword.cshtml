@page
@model ChangePasswordModel

@section Security {
    <link href="~/css/Security.css" rel="stylesheet" />
}

<h4>@Model.Id</h4>
<div class="accForm">
    <form method="post">
        <div asp-validation-summary="ModelOnly"></div>
        <div>
            <label asp-for="CurrentPassword">Old password </label>
            <input class="formInput" type="password" asp-for="CurrentPassword" />
            <span asp-validation-for="CurrentPassword" class="text-warning"></span>
        </div>
        <div>
            <label asp-for="NewPassword">New password</label>
            <input class="formInput" type="password" asp-for="NewPassword" />
            <span asp-validation-for="NewPassword" class="text-warning"></span>
        </div>
        <div>
            <label asp-for="ReenterPassword">Reenter new password</label>
            <input class="formInput" type="password" asp-for="ReenterPassword"/>
            <span asp-validation-for="ReenterPassword" class="text-warning"></span>
        </div>
        <div>
            <input class="buttn" type="submit" value="Change" />
        </div>
        <div>
            <a asp-page="AccountCenter">Back to Account Center</a>
        </div>
    </form>
</div>


@functions {
    [Authorize]
    public class ChangePasswordModel : PageModel
    {
        private UserManager<AppUser> userManager;

        public ChangePasswordModel(UserManager<AppUser> userManager)
        {
            this.userManager = userManager;
        }

        [BindProperty(SupportsGet = true)]
        public string Id { get; set; }

        [BindProperty]
        [Required(ErrorMessage = "Insert Old Password"), PersonalData]
        public string CurrentPassword { get; set; }

        [BindProperty]
        [Required (ErrorMessage = "Insert new password"), PersonalData]
        public string NewPassword { get; set; }

        [BindProperty]
        [Required(ErrorMessage = "Reenter new password"), PersonalData]
        public string ReenterPassword { get; set; }


        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                AppUser user = await userManager.FindByIdAsync(Id);

                if (await userManager.CheckPasswordAsync(user, CurrentPassword))
                {
                    if (!CurrentPassword.Equals(NewPassword) && NewPassword.Equals(ReenterPassword))
                    {

                        IdentityResult result = await userManager.ChangePasswordAsync(user, CurrentPassword, NewPassword);


                        if (result.Succeeded)
                        {
                            return RedirectToPage("Center");
                        }

                        foreach (IdentityError error in result.Errors)
                        {
                            ModelState.AddModelError("", error.Description);
                        }
                    }
                    ModelState.AddModelError("", "Cannot use old password");
                }

                ModelState.AddModelError("", "Wrong Password");
            }

            return Page();
        }
    }
} 