@page
@model CreateModel

@section Security {
    <link href="/css/Security.css" rel="stylesheet" />
}

<div class="accForm">
    <form method="post">
        <div asp-validation-summary="ModelOnly"></div>
        <div>
            <label asp-for="Username">Username</label>
            <input asp-for="Username" name="Username" class="formInput" value="@Model.Username" />
            <span asp-validation-for="Username" class="text-warning"></span>
        </div>
        <div>
            <label asp-for="Email">Email</label>
            <input asp-for="Email" name="Email" class="formInput" type="email" value="@Model.Email" />
            <span asp-validation-for="Email" class="text-warning"></span>
        </div>
        <div>
            <label asp-for="Password">Password</label>
            <input asp-for="Password" name="Password" class="formInput" type="password" value="@Model.Password" />
            <span asp-validation-for="Password" class="text-warning"></span>
        </div>
        <div>
            <button type="submit" class="buttn"><b>Register Account</b></button>
        </div>
        <a asp-page="Login">Log In</a>
        <a asp-controller="Home" asp-action="Index" class="float-right">Back</a>
    </form>
</div>



@functions{
    public class CreateModel : AdminPageModel
    {
        private UserManager<AppUser> userManager;
        private SignInManager<AppUser> signInManager;

        public CreateModel(UserManager<AppUser> _userManager, SignInManager<AppUser> _signInUser)
        {
            userManager = _userManager;
            signInManager = _signInUser;

        }


        [BindProperty][Required]
        public string Username { get; set; }

        [BindProperty][Required, EmailAddress]
        public string Email { get; set; }

        [BindProperty][Required, PersonalData]
        public string Password { get; set; }



        public IActionResult OnGet()
        {
            if (User.Identity.IsAuthenticated)
            {
                return RedirectToPage("Center");
            }

            return Page();
        }


        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                AppUser user = new AppUser { UserName = this.Username, Email = this.Email };
                IdentityResult result = await userManager.CreateAsync(user, Password);

                if (result.Succeeded)
                {
                    var signInResult = await signInManager.PasswordSignInAsync(Username, Password, false, false);

                    if (signInResult.Succeeded)
                    {
                        return RedirectToPage("Center");
                    }
                }

                foreach (IdentityError err in result.Errors)
                {
                    ModelState.AddModelError("", err.Description);
                }
            }

            return Page();
        }
    }
}