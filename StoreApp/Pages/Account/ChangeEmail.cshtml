@page 
@model ChangeEmailModel

<h4>@HttpContext.User.Identity.Name</h4>
@if (Model.Id is null)
{
    <h4>No Id Value</h4>
}
else
{
    <h4>@Model.Id</h4>
}
<div class="col-md-6 offset-md-3 col-lg-2 offset-lg-5">
    <div class="card card-body">
        <form method="post">
            <div asp-validation-summary="ModelOnly"></div>
            <div class="form-group">
                <label>New Email</label>
                <input class="form-control" type="email" asp-for="NewEmail" />
                <span asp-validation-for="NewEmail"></span>
            </div>
            <div class="form-group">
                <label asp-for="Password">Password</label>
                <input class="form-control" type="password" asp-for="Password" />
                <span asp-validation-for="NewEmail"></span>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-secondary">Send Email Confirmation Code</button>
            </div>
            <div>
                <label>Confirm Code</label>
                <input class="form-control" />
            </div>
            <div class="form-group">
                <button type="submit">Change Email</button>
            </div>
        </form>
    </div>
</div>

@functions {
    [Authorize]
    public class ChangeEmailModel : PageModel
    {
        private UserManager<AppUser> userManager;

        public ChangeEmailModel(UserManager<AppUser> userManager)
        {
            this.userManager = userManager;
        }


        [BindProperty(SupportsGet = true)]
        public string Id { get; set; }

        [BindProperty]
        [Required, EmailAddress]
        public string NewEmail { get; set; }

        [BindProperty]
        [Required, PersonalData]
        public string Password { get; set; }



        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                AppUser user = await userManager.FindByIdAsync(Id);
                if (await userManager.CheckPasswordAsync(user, Password))
                {
                    //TODO
                    //Send message with key  to new email address
                    //Email Confirmation
                    user.Email = NewEmail;

                    var result = await userManager.UpdateAsync(user);
                    if (result.Succeeded)
                    {
                        return Redirect("/Account/Center");
                    }

                    foreach (var err in result.Errors)
                    {
                        ModelState.AddModelError("", err.Description);
                    }
                }
                else
                {
                    ModelState.AddModelError("Password", "Wrong Password");
                    return Page();
                }
            }

            return Page();

        }


    }
}